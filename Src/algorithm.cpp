/*
 * Кракткое описание по необходимым и допустимым изменениям кода этого файла:
 *
 *
 * - uint32_t getModuleCount() - возвращает количество модулей соединенных в одну цепочку
 *
 *
 * - void execute() - реализует алгоритм работы каналов. Допустимые команды, используемые для реализации алгоритма:
 * 		- delay(timeout) - ожидать в течении timeout(0..4294967295) мс
 * 		- off(channelIndex) - выключить канал c индексом channelIndex(0..<индекс последнего канала>)
 * 		- on(channelIndex) - включить канал c индексом channelIndex(0..<индекс последнего канала>)
 * 		- pwm(channelIndex, period, dutyCycle) - запускает генерацию ШИМ сигнала на выходе канала с индексом channelIndex(0..<индекс последнего канала>),
 * 		периодом ШИМа period(0..4294967295) мс и длительностью импульса ШИМа dutyCycle(0..4294967295) мс.
 * 		- random(channelIndex, min, max) - запускает генерацию случайных включений/выключений выхода канала с индексом channelIndex(0..<индекс последнего канала>),
 * 		где определены минимальное и максимальное время между событиями включения/выключения значениями переменных min(0..4294967295) мс и max(0..4294967295) мс
 * 		- repeat(channelIndex, sourceChannelIndex) - устанавливает для канал с индексом channelIndex(0..<индекс последнего канала>)
 * 		режим повторения состояния канала с индексом sourceChannelIndex(0..<индекс последнего канала>)
 *
 *	где <индекс последнего канала> = 8 * <количество модулей> - 1
 *
 */

#include "algorithm.h"

uint32_t Algorithm::getModuleCount()
{
	return 1; // Заменить на количество модулей собраных в одну цепочку. По умолчанию - 1.
}

void Algorithm::execute()
{
	for(;;) {		// Вечный цикл в рамках которого исполняется алгоритм.
		// Команды алгоритма:
		delay(500);
		off(0);
		delay(500);
		on(0);
	}
}
